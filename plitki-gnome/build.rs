use std::env;
use std::path::Path;
use std::process::Command;

fn main() {
    const BLPS: &[&str] = &[
        "resources/accuracy.blp",
        "resources/combo.blp",
        "resources/window.blp",
    ];

    let status = Command::new("blueprint-compiler")
        .args(["batch-compile", "resources", "resources"])
        .args(BLPS)
        .status()
        .unwrap();
    assert!(status.success());

    let deps = compile_resources(
        "resources",
        "resources/resources.gresource.xml",
        "compiled.gresource",
    );

    for dep in deps.split_whitespace() {
        // If this is a line for a `.ui` file generated by Blueprint, replace it with a line for the
        // source `.blp` file.
        if let Some(blp) = BLPS
            .iter()
            .find(|name| dep.starts_with(&name[..name.len() - 3]))
        {
            println!("cargo:rerun-if-changed={}", blp);
            continue;
        }

        println!("cargo:rerun-if-changed={}", dep);
    }
}

/// Copy of `glib_build_tools::compile_resources()` that returns the dependency string.
///
/// We need this to filter out the Blueprint-generated `.ui` files from the output before passing it
/// to `cargo:rerun-if-changed`. Otherwise cargo thinks they are always changed (since Blueprint
/// regenerates them even if the output is the same), which leads to always rebuilding the app.
fn compile_resources<P: AsRef<Path>>(source_dir: P, gresource: &str, target: &str) -> String {
    let out_dir = env::var("OUT_DIR").unwrap();

    let status = Command::new("glib-compile-resources")
        .arg("--sourcedir")
        .arg(source_dir.as_ref())
        .arg("--target")
        .arg(&format!("{}/{}", out_dir, target))
        .arg(gresource)
        .status()
        .unwrap();

    assert!(
        status.success(),
        "glib-compile-resources failed with exit status {}",
        status
    );

    println!("cargo:rerun-if-changed={}", gresource);
    let output = Command::new("glib-compile-resources")
        .arg("--sourcedir")
        .arg(source_dir.as_ref())
        .arg("--generate-dependencies")
        .arg(gresource)
        .output()
        .unwrap()
        .stdout;
    String::from_utf8(output).unwrap()
}
